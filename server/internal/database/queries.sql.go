// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: queries.sql

package database

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  name, token
) VALUES (
  $1, $2
)
RETURNING id, name, token, wins, losses, datecreated
`

type CreateUserParams struct {
	Name  string
	Token string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Name, arg.Token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Token,
		&i.Wins,
		&i.Losses,
		&i.Datecreated,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, token, wins, losses, datecreated FROM users 
WHERE id = $1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Token,
		&i.Wins,
		&i.Losses,
		&i.Datecreated,
	)
	return i, err
}

const getUserByToken = `-- name: GetUserByToken :one
SELECT id, name, token, wins, losses, datecreated FROM users 
WHERE token = $1
`

func (q *Queries) GetUserByToken(ctx context.Context, token string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByToken, token)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Token,
		&i.Wins,
		&i.Losses,
		&i.Datecreated,
	)
	return i, err
}
